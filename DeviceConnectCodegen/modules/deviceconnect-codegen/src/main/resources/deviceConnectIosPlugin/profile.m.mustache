#import "{{profileClass}}.h"

@implementation {{profileClass}}
{{#hasEventApi}}
{
    NSMutableDictionary *_timers;
}

{{/hasEventApi}}

- (instancetype) init
{
    self = [super init];
    {{#hasEventApi}}
    _timers = [NSMutableDictionary dictionary];
    {{/hasEventApi}}

    __weak {{profileClass}} *weakSelf = self;
    {{#apiList}}

    // {{apiId}}
    [self add{{#getApi}}Get{{/getApi}}{{#postApi}}Post{{/postApi}}{{#putApi}}Put{{/putApi}}{{#deleteApi}}Delete{{/deleteApi}}Path:@"{{apiPath}}" api:^BOOL(DConnectRequestMessage *request, DConnectResponseMessage *response) {
        {{#paramList}}
        {{{declaration}}}
        {{/paramList}}

        // TODO ここでAPIを実装してください.
        {{#isOneShotApi}}
        [response setResult:DConnectMessageResultTypeOk];
        {{#responses}}
        {{{.}}}
        {{/responses}}
        {{/isOneShotApi}}
        {{#isEventApi}}
        {{#putApi}}
        DConnectEventManager *mgr = [DConnectEventManager sharedManagerForClass:[{{{pluginClass}}} class]];
        DConnectEventError error = [mgr addEventForRequest:request];
        if (error == DConnectEventErrorNone) {
            [response setResult:DConnectMessageResultTypeOk];

            // 以下、サンプルのイベントの定期的送信を開始.
            [weakSelf startEventTimer:request interval:{{#canSetInterval}}interval{{/canSetInterval}}{{^canSetInterval}}1000{{/canSetInterval}} handler:^{
                NSArray *events = [mgr eventListForServiceId:serviceId
                                                     profile:[request profile]
                                                   interface:[request interface]
                                                   attribute:[request attribute]];
                for (DConnectEvent *event in events) {
                    DConnectMessage *message = [DConnectEventManager createEventMessageWithEvent:event];
                    // サンプルのイベントメッセージを作成.
                    {{#events}}
                    {{{.}}}
                    {{/events}}
                    DConnectDevicePlugin *plugin = (DConnectDevicePlugin *) weakSelf.plugin;
                    [plugin sendEvent:message];
                }
            }];
        } else if (error == DConnectEventErrorInvalidParameter) {
            [response setErrorToInvalidRequestParameter];
        } else {
            [response setErrorToUnknown];
        }
        {{/putApi}}
        {{#deleteApi}}
        DConnectEventManager *mgr = [DConnectEventManager sharedManagerForClass:[{{{pluginClass}}} class]];
        DConnectEventError error = [mgr removeEventForRequest:request];
        if (error == DConnectEventErrorNone) {
            [response setResult:DConnectMessageResultTypeOk];
            [weakSelf stopEventTimer:request];
        } else if (error == DConnectEventErrorInvalidParameter) {
            [response setErrorToInvalidRequestParameter];
        } else {
            [response setErrorToUnknown];
        }
        {{/deleteApi}}
        {{/isEventApi}}
        return YES;
    }];
    {{/apiList}}
    return self;
}

- (NSString *) profileName {
    return @"{{profileNameDefinition}}";
}

{{#hasEventApi}}

- (void) startEventTimer:(DConnectRequestMessage*)request
                interval:(long long)interval
                handler:(dispatch_block_t)handler {
    if (interval == LONG_LONG_MIN) {
        interval = 1000;
    }

    NSString *key = [self createTimerKey:request];
    dispatch_source_t _timerSource = (dispatch_source_t) [self timerForKey:key];

    if (_timerSource) {
        return;
    }
    _timerSource = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0));
    [self addTimer:_timerSource forKey:key];

    dispatch_source_set_cancel_handler(_timerSource, ^{
        [self removeTimerForKey:key];
    });
    dispatch_source_set_event_handler(_timerSource, handler);

    dispatch_source_set_timer(_timerSource, dispatch_time(DISPATCH_TIME_NOW, 0), (interval * 1000000), NSEC_PER_SEC / 2);
    dispatch_resume(_timerSource);
}

- (void) stopEventTimer:(DConnectRequestMessage*)request {
    NSString *key = [self createTimerKey:request];
    dispatch_source_t _timerSource = (dispatch_source_t) [self timerForKey:key];

    if (!_timerSource) {
        return;
    }
    dispatch_source_cancel(_timerSource);
}

- (id) timerForKey:(NSString*)key {
    return [_timers valueForKey:key];
}

- (void) addTimer:(id)timer forKey:(NSString*)key {
    [_timers setValue:timer forKey:key];
}

- (void) removeTimerForKey:(NSString*)key {
    [_timers setValue:nil forKey:key];
}

- (NSString*) createTimerKey:(DConnectRequestMessage*)request {
    return [NSString stringWithFormat:@"%@-%@-%@-%@",
                        [request profile],
                        [request interface],
                        [request attribute],
                        [request serviceId]];
}
{{/hasEventApi}}
@end