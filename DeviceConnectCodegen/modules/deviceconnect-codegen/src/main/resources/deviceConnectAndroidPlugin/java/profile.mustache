package {{profilePackage}};

import android.content.Intent;
import android.os.Bundle;

{{#hasEventApi}}
import org.deviceconnect.android.event.Event;
import org.deviceconnect.android.event.EventError;
import org.deviceconnect.android.event.EventManager;
{{/hasEventApi}}
import org.deviceconnect.android.message.MessageUtils;
import org.deviceconnect.android.profile.DConnectProfile;
{{#hasGetApi}}
import org.deviceconnect.android.profile.api.GetApi;
{{/hasGetApi}}
{{#hasPostApi}}
import org.deviceconnect.android.profile.api.PostApi;
{{/hasPostApi}}
{{#hasPutApi}}
import org.deviceconnect.android.profile.api.PutApi;
{{/hasPutApi}}
{{#hasDeleteApi}}
import org.deviceconnect.android.profile.api.DeleteApi;
{{/hasDeleteApi}}
import org.deviceconnect.message.DConnectMessage;
{{#hasEventApi}}

import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentHashMap;
{{/hasEventApi}}

public class {{profileClass}} extends DConnectProfile {

    public {{profileClass}}() {

        {{#apiList}}
        // {{apiId}}
        addApi(new {{#getApi}}Get{{/getApi}}{{#postApi}}Post{{/postApi}}{{#putApi}}Put{{/putApi}}{{#deleteApi}}Delete{{/deleteApi}}Api() {
            {{#interface}}
            @Override
            public String getInterface() {
                return "{{interface}}";
            }

            {{/interface}}
            {{#attribute}}
            @Override
            public String getAttribute() {
                return "{{attribute}}";
            }

            {{/attribute}}
            @Override
            public boolean onRequest(final Intent request, final Intent response) {
                {{#paramList}}
                {{{declaration}}}
                {{/paramList}}

                {{#isOneShotApi}}
                // TODO ここでAPIを実装してください. 以下はサンプルのレスポンス作成処理です.
                setResult(response, DConnectMessage.RESULT_OK);
                {{#responses}}
                {{{.}}}
                {{/responses}}
                {{/isOneShotApi}}
                {{#isEventApi}}
                {{#putApi}}
                EventError error = EventManager.INSTANCE.addEvent(request);
                switch (error) {
                    case NONE:
                        setResult(response, DConnectMessage.RESULT_OK);

                        // 以下、サンプルのイベントの定期的送信を開始.
                        String taskId = serviceId;
                        TimerTask task = new TimerTask() {
                            @Override
                            public void run() {
                                Event event = EventManager.INSTANCE.getEvent(request);
                                Intent message = EventManager.createEventMessage(event);
                                {{#events}}
                                {{{.}}}
                                {{/events}}
                                sendEvent(message, event.getAccessToken());
                            }
                        };
                        startTimer(taskId, task, {{#canSetInterval}}interval{{/canSetInterval}}{{^canSetInterval}}1000L{{/canSetInterval}});
                        break;
                    case INVALID_PARAMETER:
                        MessageUtils.setInvalidRequestParameterError(response);
                        break;
                    default:
                        MessageUtils.setUnknownError(response);
                        break;
                }
                {{/putApi}}
                {{#deleteApi}}
                EventError error = EventManager.INSTANCE.removeEvent(request);
                switch (error) {
                    case NONE:
                        setResult(response, DConnectMessage.RESULT_OK);

                        // 以下、サンプルのイベントの定期的送信を停止.
                        String taskId = serviceId;
                        stopTimer(taskId);
                        break;
                    case INVALID_PARAMETER:
                        MessageUtils.setInvalidRequestParameterError(response);
                        break;
                    case NOT_FOUND:
                        MessageUtils.setUnknownError(response, "Event is not registered.");
                        break;
                    default:
                        MessageUtils.setUnknownError(response);
                        break;
                }
                {{/deleteApi}}
                {{/isEventApi}}
                return true;
            }
        });

        {{/apiList}}
    }

    @Override
    public String getProfileName() {
        return "{{profileNameDefinition}}";
    }
    {{#hasEventApi}}

    private final Map<String, TimerTask> mTimerTasks = new ConcurrentHashMap<>();
    private final Timer mTimer = new Timer();

    private void startTimer(final String taskId, final TimerTask task, final Long interval) {
        synchronized (mTimerTasks) {
            stopTimer(taskId);
            mTimerTasks.put(taskId, task);
            mTimer.scheduleAtFixedRate(task, 0, interval != null ? interval : 1000L);
        }
    }

    private void stopTimer(final String taskId) {
        synchronized (mTimerTasks) {
            TimerTask timer = mTimerTasks.remove(taskId);
            if (timer != null) {
                timer.cancel();
            }
        }
    }
    {{/hasEventApi}}
}